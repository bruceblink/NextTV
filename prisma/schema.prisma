generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model sqlx_migrations {
  version        BigInt   @id
  description    String
  installed_on   DateTime @default(now()) @db.Timestamptz(6)
  success        Boolean
  checksum       Bytes
  execution_time BigInt

  @@map("_sqlx_migrations")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ani_collect {
  id           BigInt   @id @default(autoincrement())
  user_id      String?  @default("")
  ani_item_id  BigInt
  ani_title    String
  collect_time DateTime @default(now()) @db.Timestamptz(6)
  is_watched   Boolean  @default(false)
  ani_info     ani_info @relation(fields: [ani_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ani_item")

  @@unique([user_id, ani_item_id], map: "uniq_ani_collect")
  @@index([ani_item_id, collect_time], map: "idx_ani_collect_item_time")
  @@index([ani_title], map: "idx_ani_collect_title")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ani_info {
  id                BigInt              @id @default(autoincrement())
  title             String
  update_count      String?
  update_info       String?
  image_url         String
  detail_url        String
  update_time       DateTime            @default(now()) @db.Timestamptz(6)
  platform          String
  ani_collect       ani_collect[]
  ani_watch_history ani_watch_history[]

  @@unique([title, platform, update_count], map: "uniq_ani_info")
  @@index([update_time], map: "idx_ani_info_update_time")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ani_watch_history {
  id           BigInt   @id @default(autoincrement())
  user_id      String?  @default("")
  ani_item_id  BigInt
  watched_time DateTime @default(now()) @db.Timestamptz(6)
  ani_info     ani_info @relation(fields: [ani_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ani_watch")

  @@unique([user_id, ani_item_id], map: "uniq_ani_watch")
  @@index([ani_item_id, watched_time], map: "idx_ani_watch_history_item_time")
  @@index([watched_time], map: "idx_ani_watch_history_time")
}

model customers {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String @db.VarChar(255)
  email     String @db.VarChar(255)
  image_url String @db.VarChar(255)
}

model invoices {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer_id String   @db.Uuid
  amount      Int
  status      String   @db.VarChar(255)
  date        DateTime @db.Date

  @@unique([customer_id, date, amount, status], name: "unique_invoice")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  token      String
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  revoked    Boolean   @default(false)
  user_info  user_info @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model revenue {
  month   String @unique @db.VarChar(4)
  revenue Int
}

model subscription_token {
  subscription_token String        @id
  subscriber_id      String        @db.Uuid
  subscriptions      subscriptions @relation(fields: [subscriber_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model subscriptions {
  id                 String               @id @db.Uuid
  email              String               @unique
  name               String
  subscribed_at      DateTime             @db.Timestamptz(6)
  subscription_token subscription_token[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_identities {
  id               BigInt    @id @default(autoincrement())
  user_id          BigInt
  provider         String    @db.VarChar(50)
  provider_uid     String    @db.VarChar(255)
  access_token     String?
  token_expires_at DateTime? @db.Timestamptz(6)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  user_info        user_info @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_uid])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_info {
  id              BigInt            @id @default(autoincrement())
  email           String?           @unique @db.VarChar(255)
  username        String?           @unique @db.VarChar(100)
  password        String?
  display_name    String?           @db.VarChar(255)
  avatar_url      String?
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  refresh_tokens  refresh_tokens[]
  user_identities user_identities[]
}

model video_info {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String?  @unique @db.VarChar(255)
  rating        Json?
  pic           Json?
  is_new        Boolean?
  uri           String?
  episodes_info String?
  card_subtitle String?
  type          String?  @db.VarChar(128)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  @@unique([title, episodes_info], map: "uniq_video_info")
}
